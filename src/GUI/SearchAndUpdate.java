package gui;

import gui.common.tablemodels.StudentTableModel;
import java.util.List;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;

public class SearchAndUpdate extends javax.swing.JPanel {
    StudentTableModel tableModel;
    TableRowSorter<StudentTableModel> tableSorter;
    ListSelectionModel selectionModel;
    Boolean gpaFilterOn = false;

    public SearchAndUpdate(StudentTableModel studentTable) {
        initComponents();
        tableModel = studentTable;
        studentsViewTable.setModel(tableModel);
        // Sorter initialization for use with filter() when search input is updated
        tableSorter = new TableRowSorter<>(tableModel);
        studentsViewTable.setRowSorter(tableSorter);

        // Selection Handling
        selectionModel = studentsViewTable.getSelectionModel(); // Selection Model == Selection Manager
        selectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); // Allow only one row to be selected
        selectionModel.addListSelectionListener((event) -> {
            editSelectedButton.setEnabled(!selectionModel.isSelectionEmpty()); // Enable edit button if student is
                                                                               // selected
        });
    }

    // On searchInput keyTyped/ actionPerformed
    private void filter() {
        var key = searchBar.getText();
        RowFilter<Object, Object> andNeutralFilter = new RowFilter<Object, Object>() {
            @Override
            public boolean include(Entry<? extends Object, ? extends Object> entry) {
                return true;
            }
        };
        RowFilter<Object, Object> orNeutralFilter = new RowFilter<Object, Object>() {
            @Override
            public boolean include(Entry<? extends Object, ? extends Object> entry) {
                return false;
            }
        };

        var searchRowFilter = andNeutralFilter;
        var gpaRowFilter = andNeutralFilter;
        if (key.trim().length() != 0) {
            // Reset filter if key is empty
            var nameFilter = RowFilter.regexFilter("(?i)" + key, studentsViewTable.getColumn("Name").getModelIndex());
            var idFilter = RowFilter.regexFilter("(?i)" + key, studentsViewTable.getColumn("ID").getModelIndex());
            searchRowFilter = RowFilter.orFilter(List.of(nameFilter, idFilter));
        }

        if (gpaFilterOn) {
            var gpaCol = studentsViewTable.getColumn("GPA").getModelIndex();
            var higherThanMin = RowFilter.numberFilter(RowFilter.ComparisonType.AFTER,
                    (Double) this.minGpaFilterInput.getValue(), gpaCol);
            var orEqualMin = RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL,
                    (Double) this.minGpaFilterInput.getValue(), gpaCol);
            var lowerThanMax = RowFilter.numberFilter(RowFilter.ComparisonType.BEFORE,
                    (Double) this.maxGpaFilterInput.getValue(), gpaCol);
            var orEqualMax = RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL,
                    (Double) this.maxGpaFilterInput.getValue(), gpaCol);
            gpaRowFilter = RowFilter.andFilter(List.of(RowFilter.orFilter(List.of(higherThanMin, orEqualMin)),
                    RowFilter.orFilter(List.of(lowerThanMax, orEqualMax))));

        }

        tableSorter.setRowFilter(RowFilter.andFilter(List.of(gpaRowFilter, searchRowFilter)));

    }

    // On editButton pressed
    private void selectAndEdit() {
        // Get selected row -> get ID column -> get ID -> pass ID to edit window
        var row = studentsViewTable.getSelectedRow();
        var idColumn = studentsViewTable.getColumn("ID").getModelIndex();
        EditStudent.edit(String.valueOf(studentsViewTable.getValueAt(row, idColumn)));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        title = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        tableScrollPane = new javax.swing.JScrollPane();
        studentsViewTable = new javax.swing.JTable();
        searchBar = new javax.swing.JTextField();
        searchLabel = new javax.swing.JLabel();
        editSelectedButton = new javax.swing.JButton();
        minGpaFilterInput = new javax.swing.JSpinner();
        maxGpaFilterInput = new javax.swing.JSpinner();
        minGpaLabel = new javax.swing.JLabel();
        maxGpaLabel = new javax.swing.JLabel();
        gpaFilter = new javax.swing.JLabel();
        gpaFilterToggleButton = new javax.swing.JToggleButton();

        setBackground(new java.awt.Color(130, 195, 130));
        setEnabled(false);
        setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        setLayout(new java.awt.GridBagLayout());

        title.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        title.setText("Update Students");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        add(title, gridBagConstraints);

        backButton.setBackground(new java.awt.Color(255, 153, 153));
        backButton.setText("Back");
        backButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backButtonMouseClicked(evt);
            }
        });
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 19, 0, 0);
        add(backButton, gridBagConstraints);

        studentsViewTable.setModel(studentsViewTable.getModel());
        tableScrollPane.setViewportView(studentsViewTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(tableScrollPane, gridBagConstraints);

        searchBar.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBarActionPerformed(evt);
            }
        });
        searchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchBarKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.3;
        add(searchBar, gridBagConstraints);

        searchLabel.setText("Search");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 26;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 15, 15);
        add(searchLabel, gridBagConstraints);

        editSelectedButton.setBackground(new java.awt.Color(0, 204, 255));
        editSelectedButton.setText("Edit Selected");
        editSelectedButton.setEnabled(false);
        editSelectedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        add(editSelectedButton, gridBagConstraints);

        minGpaFilterInput.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 4.0d, 0.1d));
        minGpaFilterInput.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                onMinGpaStateChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(minGpaFilterInput, gridBagConstraints);

        maxGpaFilterInput.setModel(new javax.swing.SpinnerNumberModel(4.0d, 0.0d, 4.0d, 0.1d));
        maxGpaFilterInput.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxGpaStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(maxGpaFilterInput, gridBagConstraints);

        minGpaLabel.setText("Minimum");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(minGpaLabel, gridBagConstraints);

        maxGpaLabel.setText("Maximum");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(maxGpaLabel, gridBagConstraints);

        gpaFilter.setText("GPA Filter");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(gpaFilter, gridBagConstraints);

        gpaFilterToggleButton.setText("Enable GPA Filter");
        gpaFilterToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gpaFilterToggleActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(gpaFilterToggleButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void onMinGpaStateChange(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_onMinGpaStateChange
                filter();
        if ((double) this.maxGpaFilterInput.getValue() < (double) this.minGpaFilterInput.getValue()) {
            this.maxGpaFilterInput.setValue((double) this.minGpaFilterInput.getValue());
        }
    }//GEN-LAST:event_onMinGpaStateChange

    private void maxGpaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxGpaStateChanged
        filter();
        if ((double) this.minGpaFilterInput.getValue() > (double) this.maxGpaFilterInput.getValue()) {
            this.minGpaFilterInput.setValue((double) this.maxGpaFilterInput.getValue());
        }
    }//GEN-LAST:event_maxGpaStateChanged


    private void gpaFilterToggleActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_gpaFilterToggleActionPerformed
        gpaFilterOn = !gpaFilterOn;
        if (gpaFilterOn)
            gpaFilterToggleButton.setText("Disable GPA Filter");
        else
            gpaFilterToggleButton.setText("Enable GPA Filter");
        this.filter();
    }// GEN-LAST:event_gpaFilterToggleActionPerformed

    private void editButtonPressed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_editButtonPressed
        selectAndEdit();
    }// GEN-LAST:event_editButtonPressed

    private void backButtonMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_backButtonMouseClicked
        MainWindow frame = (MainWindow) javax.swing.SwingUtilities.getWindowAncestor(this);
        frame.showPanel("home");
    }// GEN-LAST:event_backButtonMouseClicked

    private void searchBarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_searchBarActionPerformed
        filter();
    }// GEN-LAST:event_searchBarActionPerformed

    private void searchBarKeyTyped(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_searchBarKeyTyped
        filter();
    }// GEN-LAST:event_searchBarKeyTyped

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_backButtonActionPerformed
        MainWindow frame = (MainWindow) javax.swing.SwingUtilities.getWindowAncestor(this);
        frame.showPanel("home");
    }// GEN-LAST:event_backButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton editSelectedButton;
    private javax.swing.JLabel gpaFilter;
    private javax.swing.JToggleButton gpaFilterToggleButton;
    private javax.swing.JSpinner maxGpaFilterInput;
    private javax.swing.JLabel maxGpaLabel;
    private javax.swing.JSpinner minGpaFilterInput;
    private javax.swing.JLabel minGpaLabel;
    private javax.swing.JTextField searchBar;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JTable studentsViewTable;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables

}